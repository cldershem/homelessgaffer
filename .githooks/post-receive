#!/usr/bin/env python
"""
    .githooks.post-receive

    Updates `requirements.txt`, restarts services, downloads untracked files,
    checks out repo to correct directory.
"""

# import os
import subprocess
import filecmp
import urllib
import zipfile

BASE_DIR = "/var/www/homelessgaffer.com/"
PYTHON_DIR = "$WORKON_HOME/hg/bin/"


def gitCheckout():
    """Checks out repo to the proper directory."""
    subprocess.call(["git", "--work-tree=" + BASE_DIR, "checkout", "-f"],
                    cwd="/home/cldershem/homelessgaffer.git")


def updateRequirements():
    """
    Checks to see if any new modules needs to be installed, installing
    as needed.
    """
    oldRequirements = BASE_DIR + "tmp/requirements.txt.old"
    newRequirements = BASE_DIR + "requirements.txt"

    with open(oldRequirements, "w") as f:
        subprocess.call([PYTHON_DIR + "pip freeze"], stdout=f, shell=True)
    if filecmp.cmp(oldRequirements, newRequirements) is True:
        print("No changes to requirements.txt, skipping update.")
    else:
        subprocess.call([PYTHON_DIR + "pip install -r " + newRequirements],
                        shell=True)
    if filecmp.cmp(oldRequirements, newRequirements) is True:
        print('updated requirements.txt')
    subprocess.call(["rm", oldRequirements])


def restartServices():
    """Restarts nginx and uwsgi services."""
    subprocess.call(["sudo", "service", "nginx", "restart"])
    subprocess.call(["sudo", "service", "uwsgi", "restart"])


def getNonTrackedFiles():
    """Downloads and installs any necessary libraries not in git."""
    jsDir = "app/static/js/"
    kineticJS = {
        "name": "kinetic-v4.6.0.min.js",
        "url": "http://d3lp1msu2r81bx.cloudfront.net/kjs/js/lib/" +
               "kinetic-v4.6.0.min.js",
        "zip": False
        }
    neededLibs = [kineticJS]

    for item in neededLibs:
        try:
            with open(BASE_DIR + jsDir + item['name']):
                print "skipping %s" % (item['name'])
        except IOError:
            if item['zip'] is False:
                urllib.urlretrieve(item['url'],
                                   filename=BASE_DIR + jsDir + item['name'])
                print "downloading %s" % (item['name'])
            elif item['zip'] is not False:
                filename = item['zip']
                urllib.urlretrieve(item['url'],
                                   filename=filename)
                with zipfile.ZipFile(filename, "r") as z:
                    z.extractall(path=BASE_DIR + jsDir)
                    print "extrated %s" % (item['name'])
                subprocess.call(["rm", item['zip']])
            print "%s -- ready." % (item['name'])


def fixPermissions():
    """Fix any permissions issues."""
    pass

if __name__ == '__main__':
    gitCheckout()
    updateRequirements()
    getNonTrackedFiles()
    restartServices()
    print(
        """
        ###############################
        Do you need to copy secrets.py?
        ###############################
        """)
